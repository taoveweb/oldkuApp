const React = require('react');
const ReactNative = require('react-native');
const {
  StyleSheet,
  Text,
  View,
  Animated,
} = ReactNative;
const Button = require('./Button');

const DefaultTabBar = React.createClass({
  propTypes: {
    goToPage: React.PropTypes.func,
    activeTab: React.PropTypes.number,
    tabs: React.PropTypes.array,
    backgroundColor: React.PropTypes.string,
    activeTextColor: React.PropTypes.string,
    inactiveTextColor: React.PropTypes.string,
    textStyle: Text.propTypes.style,
    tabStyle: View.propTypes.style,
    renderTab: React.PropTypes.func,
    underlineStyle: View.propTypes.style,
  },

  getDefaultProps() {
    return {
      activeTextColor: 'navy',
      inactiveTextColor: 'black',
      backgroundColor: null,
    };
  },

  renderTabOption(name, page) {
  },

  renderTab(name, page, isTabActive, onPressHandler) {
    const { activeTextColor, inactiveTextColor, textStyle, } = this.props;
    const textColor = isTabActive ? activeTextColor : inactiveTextColor;
    const fontWeight = isTabActive ? 'bold' : 'normal';

    return <Button
      style={{flex: 1, }}
      key={name}
      accessible={true}
      accessibilityLabel={name}
      accessibilityTraits='button'
      onPress={() => onPressHandler(page)}
    >
      <View style={[styles.tab, this.props.tabStyle, ]}>
        <Text style={[{color: textColor, fontWeight, }, textStyle, ]}>
          {name}
        </Text>
      </View>
    </Button>;
  },

  render() {
    const containerWidth = this.props.containerWidth*3/5;
    const numberOfTabs = this.props.tabs.length;
    const tabWidth=containerWidth/numberOfTabs;

    const tabUnderlineStyle = Object.assign({},{
      position: 'absolute',
      width: 10,
      height: 4,
      backgroundColor: '#ffa500',
      bottom: 5,
      borderRadius:4
    },this.props.underlineStyle)
    const startX=tabWidth/2-tabUnderlineStyle.width/2;
    const left = this.props.scrollValue.interpolate({
      inputRange: [0, 1, ], outputRange: [startX,  containerWidth / numberOfTabs+startX, ],
    });
    return (

        <View style={[styles.tabBox,{backgroundColor: this.props.backgroundColor},this.props.tabBoxStyle]}>
          <View style={[styles.tabs, {width:containerWidth,}, this.props.style,{position:'relative' } ]}>
            {this.props.tabs.map((name, page) => {
              const isTabActive = this.props.activeTab === page;
              const renderTab = this.props.renderTab || this.renderTab;
              return renderTab(name, page, isTabActive, this.props.goToPage);
            })}
            <Animated.View style={[tabUnderlineStyle, { left, }, , ]} />
          </View>
        </View>
    );
  },
});

const styles = StyleSheet.create({
  tabBox:{height:59,flex:1,position:"absolute",top:0,left:0,
    right:0,
    backgroundColor:"#f5f5f5",
    justifyContent:'center',
    alignItems: 'center',
    borderWidth: 1,
    borderTopWidth: 0,
    borderLeftWidth: 0,
    borderRightWidth: 0,
    borderColor: '#ccc',

  },
  tab: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingBottom: 10,

  },
  tabs: {
    flexDirection: 'row',
    justifyContent: 'space-around',

  },
});

module.exports = DefaultTabBar;
